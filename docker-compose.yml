version: "3.8"

services:
  # Text Generation Inference
  tgi:
    image: ghcr.io/huggingface/text-generation-inference:latest
    runtime: nvidia
    container_name: tgi
    ports:
      - "8080:80"
    volumes:
      - ./models:/data
    environment:
      - HF_TOKEN=${HF_TOKEN}
      - MODEL_ID=meta-llama/Llama-3.2-1B
      - DEVICE=gpu
      - QUANTIZE=bitsandbytes-nf4
      - CUDA_GRAPHS=0
      - DISABLE_CUSTOM_KERNELS=true
    # command: --model-id meta-llama/Llama-3.2-1B --max-total-tokens 4096
    networks:
      - app-network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: rabbitmqpw
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network

  # PostgreSQL Master
  postgres-master:
    image: postgres:15
    container_name: postgres-master
    environment:
      POSTGRES_DB: fragrances
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgresmaster
    ports:
      - "5432:5432"
    volumes:
      - postgres_master_data:/var/lib/postgresql/data
    networks:
      - app-network

  # PostgreSQL Replica
  postgres-replica:
    image: postgres:15
    container_name: postgres-replica
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgresmaster
    ports:
      - "5433:5432"
    depends_on:
      - postgres-master
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
    networks:
      - app-network

  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    container_name: nginx-lb
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - redis
      - rabbitmq
      - postgres-master
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3030:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - app-network
    depends_on:
      - prometheus

volumes:
  redis_data:
  rabbitmq_data:
  postgres_master_data:
  postgres_replica_data:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge
