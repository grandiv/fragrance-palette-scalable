services:
  # Text Generation Inference
  tgi:
    image: ghcr.io/huggingface/text-generation-inference:latest
    runtime: nvidia
    container_name: fragrance_tgi
    ports:
      - "8080:80"
    environment:
      - HF_TOKEN=${HF_TOKEN}
      - MODEL_ID=meta-llama/Llama-3.2-1B
      - DEVICE=gpu
      - QUANTIZE=bitsandbytes-nf4
      - CUDA_GRAPHS=0
      - DISABLE_CUSTOM_KERNELS=true
      # - NVIDIA_VISIBLE_DEVICES=all
    volumes:
      - ./models:/data
    networks:
      - app-network
    restart: unless-stopped

  # Redis Cluster for High Availability
  redis-master:
    image: redis:7-alpine
    container_name: redis-master
    ports:
      - "6379:6379"
    volumes:
      - redis_master_data:/data
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - app-network

  redis-sentinel:
    image: redis:7-alpine
    container_name: redis-sentinel
    ports:
      - "26379:26379"
    volumes:
      - ./config/redis-sentinel.conf:/tmp/sentinel.conf:ro
      - redis_sentinel_data:/data
    command: >
      sh -c "
      cp /tmp/sentinel.conf /data/sentinel.conf &&
      redis-sentinel /data/sentinel.conf
      "
    depends_on:
      redis-master:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ Cluster
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: rabbitmqpw
      RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
      RABBITMQ_DEFAULT_VHOST: "/"
      # Remove the deprecated RABBITMQ_VM_MEMORY_HIGH_WATERMARK
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - app-network

  # PostgreSQL Master with Optimized Configuration
  # PostgreSQL Master with Optimized Configuration
  # PostgreSQL Master
  postgres-master:
    image: postgres:15
    container_name: postgres-master
    environment:
      POSTGRES_DB: fragrances
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgresmaster
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: replicator123
      PGUSER: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_master_data:/var/lib/postgresql/data
      - ./config/postgres-master.conf:/etc/postgresql/postgresql.conf:ro
      - ./config/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./scripts/init-master.sh:/docker-entrypoint-initdb.d/01-init-master.sh:ro
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d fragrances"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  # PostgreSQL Replica 1
  # PostgreSQL Replica 1
  postgres-replica-1:
    build:
      context: ./postgres
      dockerfile: Dockerfile.replica
    container_name: postgres-replica-1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgresmaster
      PGUSER: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_replica1_data:/var/lib/postgresql/data
    depends_on:
      postgres-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  # PostgreSQL Replica 2
  postgres-replica-2:
    build:
      context: ./postgres
      dockerfile: Dockerfile.replica
    container_name: postgres-replica-2
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgresmaster
      PGUSER: postgres
    ports:
      - "5434:5432"
    volumes:
      - postgres_replica2_data:/var/lib/postgresql/data
    depends_on:
      postgres-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  # Backend Services (Multiple Instances)
  # Backend Services (Fixed port conflicts)
  backend-1:
    build: ./backend
    container_name: backend-1
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:postgresmaster@postgres-master:5432/fragrances
      - DATABASE_URL_MASTER=postgresql://postgres:postgresmaster@postgres-master:5432/fragrances
      - DATABASE_URL_REPLICA=postgresql://postgres:postgresmaster@postgres-replica-1:5432/fragrances
      - REDIS_HOST=redis-master
      - REDIS_PORT=6379
      - REDIS_URL=redis://redis-master:6379
      - RABBITMQ_URL=amqp://admin:rabbitmqpw@rabbitmq:5672
      - JWT_SECRET=maisonmargielabythefireplace
      - LLM_URL=http://tgi:80
      - FRONTEND_URL=http://frontend:3000
      - HF_TOKEN=${HF_TOKEN}
      - INSTANCE_ID=backend-1 # ✅ Correct
    ports:
      - "3001:3001" # ✅ Unique external port
    depends_on:
      postgres-master:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "2.0"
        reservations:
          memory: 512M
          cpus: "0.5"
    networks:
      - app-network

  backend-2:
    build: ./backend
    container_name: backend-2
    environment:
      - NODE_ENV=production
      - PORT=3001 # ✅ Internal port stays 3001
      - DATABASE_URL=postgresql://postgres:postgresmaster@postgres-master:5432/fragrances
      - DATABASE_URL_MASTER=postgresql://postgres:postgresmaster@postgres-master:5432/fragrances
      - DATABASE_URL_REPLICA=postgresql://postgres:postgresmaster@postgres-replica-2:5432/fragrances
      - REDIS_HOST=redis-master
      - REDIS_PORT=6379
      - REDIS_URL=redis://redis-master:6379
      - RABBITMQ_URL=amqp://admin:rabbitmqpw@rabbitmq:5672
      - JWT_SECRET=maisonmargielabythefireplace
      - LLM_URL=http://tgi:80
      - FRONTEND_URL=http://frontend:3000
      - HF_TOKEN=${HF_TOKEN}
      - INSTANCE_ID=backend-2 # ✅ Fixed
    ports:
      - "3002:3001" # ✅ Fixed: Different external port
    depends_on:
      postgres-master:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "2.0"
        reservations:
          memory: 512M
          cpus: "0.5"
    networks:
      - app-network

  backend-3:
    build: ./backend
    container_name: backend-3
    environment:
      - NODE_ENV=production
      - PORT=3001 # ✅ Internal port stays 3001
      - DATABASE_URL=postgresql://postgres:postgresmaster@postgres-master:5432/fragrances
      - DATABASE_URL_MASTER=postgresql://postgres:postgresmaster@postgres-master:5432/fragrances
      - DATABASE_URL_REPLICA=postgresql://postgres:postgresmaster@postgres-replica-1:5432/fragrances
      - REDIS_HOST=redis-master
      - REDIS_PORT=6379
      - REDIS_URL=redis://redis-master:6379
      - RABBITMQ_URL=amqp://admin:rabbitmqpw@rabbitmq:5672
      - JWT_SECRET=maisonmargielabythefireplace
      - LLM_URL=http://tgi:80
      - FRONTEND_URL=http://frontend:3000
      - HF_TOKEN=${HF_TOKEN}
      - INSTANCE_ID=backend-3 # ✅ Fixed
    ports:
      - "3003:3001" # ✅ Fixed: Different external port
    depends_on:
      postgres-master:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "2.0"
        reservations:
          memory: 512M
          cpus: "0.5"
    networks:
      - app-network

  # Frontend Services (Fixed port conflicts)
  frontend-1:
    build: ./frontend
    container_name: frontend-1
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost/
      - NODE_ENV=production
    ports:
      - "3000:3000" # ✅ Unique external port
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - app-network

  frontend-2:
    build: ./frontend
    container_name: frontend-2
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost/
      - NODE_ENV=production
    ports:
      - "3004:3000" # ✅ Fixed: Different external port
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - app-network

  # NGINX Load Balancer with Advanced Configuration
  nginx:
    image: nginx:alpine
    container_name: nginx-lb
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend-1
      - backend-2
      - backend-3
      - frontend-1
      - frontend-2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - app-network

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=15d"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
    restart: unless-stopped
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3030:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - app-network

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    restart: unless-stopped
    networks:
      - app-network

volumes:
  redis_master_data:
  redis_sentinel_data:
  rabbitmq_data:
  postgres_master_data:
  postgres_replica1_data:
  postgres_replica2_data:
  prometheus_data:
  grafana_data:
  nginx_cache:
  nginx_logs:

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
